{
  "swagger": "2.0",
  "info": {
    "description": "ITUgra OpenAPI docs",
    "version": "1.0.0",
    "title": "ITUgra"
  },
  "host": "localhost:8000",
  "basePath": "/api",
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication related endpoints"
    },
    {
      "name": "User",
      "description": "User related endpoints"
    },
    {
      "name": "Model",
      "description": "Model related endpoints"
    },
    {
      "name": "Transaction",
      "description": "Transaction related endpoints"
    }
  ],
  "schemes": ["http"],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Register a new user",
        "description": "Creates a new user and returns authentication tokens.",
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "User registration data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User registered successfully",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Log in an existing user",
        "description": "Authenticates a user and returns authentication tokens.",
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "User login data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginUserDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Log out the current user",
        "description": "Logs out the user and clears authentication tokens.",
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "User logged out successfully"
          },
          "500": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/user/profile": {
      "get": {
        "tags": ["User"],
        "summary": "Get user profile",
        "description": "Retrieves the profile information of the authenticated user.",
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/transactions/all": {
      "get": {
        "tags": ["Transaction"],
        "summary": "Get all transactions",
        "description": "Retrieves all transactions.",
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Transactions retrieved successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/transactions/my": {
      "get": {
        "tags": ["Transaction"],
        "summary": "Get current user's transactions",
        "description": "Retrieves all transactions of the authenticated user.",
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "User's transactions retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/transactions/info/{transactionUid}": {
      "get": {
        "tags": ["Transaction"],
        "summary": "Get transaction by UID",
        "description": "Retrieves a transaction by its unique identifier.",
        "parameters": [
          {
            "name": "transactionUid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction retrieved successfully"
          },
          "404": {
            "description": "Transaction not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/transaction/make": {
      "post": {
        "tags": ["Transaction"],
        "summary": "Create a new transaction",
        "description": "Creates a new transaction.",
        "parameters": [
          {
            "in": "body",
            "name": "transaction",
            "description": "Transaction creation data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTransactionDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction created successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/model/all": {
      "get": {
        "tags": ["Model"],
        "summary": "Get all models",
        "description": "Retrieves all models.",
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Models retrieved successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/model/one/{modelUid}": {
      "get": {
        "tags": ["Model"],
        "summary": "Get model by UID",
        "description": "Retrieves a model by its unique identifier.",
        "parameters": [
          {
            "name": "modelUid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Model retrieved successfully"
          },
          "404": {
            "description": "Model not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/model/create": {
      "post": {
        "tags": ["Model"],
        "summary": "Create a new model",
        "description": "Creates a new model.",
        "parameters": [
          {
            "in": "body",
            "name": "model",
            "description": "Model creation data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateModelDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Model created successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/model/update": {
      "put": {
        "tags": ["Model"],
        "summary": "Update model data",
        "description": "Updates an existing model.",
        "parameters": [
          {
            "in": "body",
            "name": "model",
            "description": "Model update data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateModelDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Model updated successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/model/delete/{modelUid}": {
      "delete": {
        "tags": ["Model"],
        "summary": "Delete a model",
        "description": "Deletes a model by its unique identifier.",
        "parameters": [
          {
            "name": "modelUid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Model deleted successfully"
          },
          "404": {
            "description": "Model not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "CreateUserDto": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "mail": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": ["ADMIN", "USER"]
        },
        "password": {
          "type": "string"
        }
      },
      "required": ["firstName", "lastName", "mail", "role", "password"]
    },
    "LoginUserDto": {
      "type": "object",
      "properties": {
        "mail": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "required": ["password"]
    },
    "CreateModelDto": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "token_cost": {
          "type": "number"
        },
        "api_link": {
          "type": "string"
        },
        "auth_token": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "description",
        "token_cost",
        "api_link",
        "auth_token"
      ]
    },
    "UpdateModelDto": {
      "type": "object",
      "properties": {
        "uid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "token_cost": {
          "type": "number"
        },
        "api_link": {
          "type": "string"
        },
        "auth_token": {
          "type": "string"
        }
      },
      "required": ["uid"]
    },
    "CreateTransactionDto": {
      "type": "object",
      "properties": {
        "userUid": {
          "type": "string"
        },
        "amount": {
          "type": "number"
        },
        "type": {
          "type": "string",
          "enum": ["PURCHASE", "GENERATION_COST"]
        },
        "description": {
          "type": "string"
        }
      },
      "required": ["userUid", "amount", "type"]
    }
  }
}
